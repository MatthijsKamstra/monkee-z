// Generated by Haxe 4.2.2
(function ($hx_exports, $global) { "use strict";
class MonkeeGui {
	constructor(x,y,parent) {
		this._x = x;
		this._y = y;
		this._parent = parent;
	}
	range(title,min,max,value,step,callback) {
		let range = new gui_Range(title,min,max,value,step,callback);
		range.add(this._parent);
		return range;
	}
	inputRange(title,min,max,value,step,callback) {
		return this.range(title,min,max,value,step,callback);
	}
	number(title,min,max,value,step,callback) {
		let el = new gui_Number(title,min,max,value,step,callback);
		el.add(this._parent);
		return el;
	}
	inputNumber(title,min,max,value,step,callback) {
		return this.number(title,min,max,value,step,callback);
	}
	rangeNumber(title,min,max,value,step,callback) {
		let el = new gui_RangeNumber(title,min,max,value,step,callback);
		el.add(this._parent);
		return el;
	}
	inputRangeNumber(title,min,max,value,step,callback) {
		return this.rangeNumber(title,min,max,value,step,callback);
	}
	button(title,callback) {
		let el = new gui_Button(title,callback);
		el.add(this._parent);
		return el;
	}
	inputButton(title,callback) {
		return this.button(title,callback);
	}
	textArea(title,value,callback) {
		let el = new gui_TextArea(title,value,callback);
		el.add(this._parent);
		return el;
	}
	text(title,value,callback) {
		let el = new gui_Text(title,value,callback);
		el.add(this._parent);
		return el;
	}
	inputtext(title,value,callback) {
		return this.text(title,value,callback);
	}
	image(title,url) {
		let el = new gui_Image(title,url);
		el.add(this._parent);
		return el;
	}
	static create(x,y,parent) {
		let monkeeGui = new MonkeeGui(x,y,parent);
		return monkeeGui;
	}
}
$hx_exports["MonkeeGui"] = MonkeeGui;
class Reflect {
	static setProperty(o,field,value) {
		let tmp;
		let tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
}
class gui_Button {
	constructor(title,callback) {
		this.title = title;
		this.callback = callback;
		gui_Button.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let input = window.document.createElement("button");
		input.type = "button";
		input.id = "" + this.title + "_" + gui_Button.ID;
		input.name = "" + this.title;
		input.innerText = "" + this.title;
		input.onclick = this.callback;
		div.appendChild(input);
	}
}
class gui_Image {
	constructor(title,url) {
		this.title = title;
		this.url = url;
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let img = window.document.createElement("img");
		img.src = "" + this.url;
		img.name = "" + this.title;
		img.alt = "" + this.title;
		img.className = "form-img img-fluid";
		div.appendChild(img);
		div.appendChild(img);
	}
}
class gui_Number {
	constructor(title,min,max,value,step,callback) {
		this.title = title;
		this.min = min;
		this.max = max;
		this.value = value;
		this.step = step;
		this.callback = callback;
		gui_Number.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title + "_" + gui_Number.ID;
		label.className = "form-label";
		label.innerText = "" + this.title + " (between " + (this.min | 0) + " and " + (this.max | 0) + "):";
		div.appendChild(label);
		let input = window.document.createElement("input");
		input.type = "number";
		input.id = "" + this.title + "_" + gui_Number.ID;
		input.name = "" + this.title;
		input.min = "" + this.min;
		input.max = "" + this.max;
		input.value = "" + this.value;
		input.step = "" + this.step;
		let _gthis = this;
		input.oninput = function() {
			_gthis.callback.apply(_gthis.callback,[input]);
		};
		div.appendChild(input);
	}
}
class gui_Range {
	constructor(title,min,max,value,step,callback) {
		this.title = title;
		this.min = min;
		this.max = max;
		this.value = value;
		this.step = step;
		this.callback = callback;
		gui_Range.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title + "_" + gui_Range.ID;
		label.className = "form-label";
		label.innerText = "" + this.title + " (between " + (this.min | 0) + " and " + (this.max | 0) + "):";
		div.appendChild(label);
		let txt = window.document.createElement("span");
		txt.id = "" + this.title + "_" + gui_Range.ID + "_value";
		txt.innerText = "" + this.value;
		let input = window.document.createElement("input");
		input.type = "range";
		label.className = "form-range";
		input.id = "" + this.title + "_" + gui_Range.ID;
		input.name = "" + this.title;
		input.min = "" + this.min;
		input.max = "" + this.max;
		input.value = "" + this.value;
		input.step = "" + this.step;
		let _gthis = this;
		input.oninput = function() {
			txt.innerHTML = this.value;
			_gthis.callback.apply(_gthis.callback,[input]);
		};
		div.appendChild(input);
		div.appendChild(txt);
	}
}
class gui_RangeNumber {
	constructor(title,min,max,value,step,callback) {
		this.title = title;
		this.min = min;
		this.max = max;
		this.value = value;
		this.step = step;
		this.callback = callback;
		gui_RangeNumber.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title + "_" + gui_RangeNumber.ID;
		label.className = "form-label";
		label.innerText = "" + this.title + " (between " + (this.min | 0) + " and " + (this.max | 0) + "):";
		div.appendChild(label);
		let input = window.document.createElement("input");
		let inputNr = window.document.createElement("input");
		inputNr.type = "number";
		label.className = "form-Number";
		inputNr.id = "" + this.title + "_" + gui_RangeNumber.ID;
		inputNr.name = "" + this.title;
		inputNr.min = "" + this.min;
		inputNr.max = "" + this.max;
		inputNr.value = "" + this.value;
		inputNr.step = "" + this.step;
		let _gthis = this;
		inputNr.oninput = function() {
			input.value = this.value;
			_gthis.callback.apply(_gthis.callback,[inputNr]);
		};
		input.type = "range";
		label.className = "form-range";
		input.id = "" + this.title + "_" + gui_RangeNumber.ID;
		input.name = "" + this.title;
		input.min = "" + this.min;
		input.max = "" + this.max;
		input.value = "" + this.value;
		input.step = "" + this.step;
		input.oninput = function() {
			inputNr.value = this.value;
			_gthis.callback.apply(_gthis.callback,[input]);
		};
		div.appendChild(input);
		div.appendChild(inputNr);
	}
}
class gui_Text {
	constructor(title,value,callback) {
		this.isAutoUpdate = false;
		this.title = title;
		this.value = value;
		this.callback = callback;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title;
		label.className = "form-label";
		label.innerText = "" + this.title;
		div.appendChild(label);
		this.input = window.document.createElement("input");
		this.input.type = "text";
		this.input.id = "" + this.title;
		this.input.name = "" + this.title;
		this.input.value = "" + this.value;
		let _gthis = this;
		this.input.oninput = function() {
			if(_gthis.isAutoUpdate) {
				Reflect.setProperty(_gthis.scope,_gthis.stringValue,_gthis.input.value);
			}
			if(_gthis.updateHandler != null) {
				_gthis.updateHandler.apply(_gthis.updateHandler,[_gthis.input]);
			}
			if(_gthis.callback != null) {
				_gthis.callback.apply(_gthis.callback,[_gthis.input]);
			}
		};
		div.appendChild(this.input);
	}
}
class gui_TextArea {
	constructor(title,value,callback) {
		this.title = title;
		this.value = value;
		this.callback = callback;
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title;
		label.className = "form-label";
		label.innerText = "" + this.title;
		div.appendChild(label);
		this.textAreaEl = window.document.createElement("textarea");
		this.textAreaEl.id = "" + this.title;
		this.textAreaEl.name = "" + this.title;
		this.textAreaEl.value = "" + this.value;
		div.appendChild(this.textAreaEl);
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
{
}
gui_Button.ID = 0;
gui_Number.ID = 0;
gui_Range.ID = 0;
gui_RangeNumber.ID = 0;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
