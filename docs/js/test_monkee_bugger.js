// Generated by Haxe 4.1.5
(function ($global) { "use strict";
class MonkeeBuggerTest {
	constructor() {
		this.DEBUG = true;
		if(this.DEBUG) {
			$global.console.log("[Monkee-Z]" + " - MonkeeBugger - " + "2021-05-07 10:38:41");
		}
		haxe_Timer.delay(function() {
			$global.console.log("test " + 0 + " in " + 0 + "ms");
		},0);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 1 + " in " + 1000 + "ms");
		},1000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 2 + " in " + 2000 + "ms");
		},2000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 3 + " in " + 3000 + "ms");
		},3000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 4 + " in " + 4000 + "ms");
		},4000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 5 + " in " + 5000 + "ms");
		},5000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 6 + " in " + 6000 + "ms");
		},6000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 7 + " in " + 7000 + "ms");
		},7000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 8 + " in " + 8000 + "ms");
		},8000);
		haxe_Timer.delay(function() {
			$global.console.log("test " + 9 + " in " + 9000 + "ms");
		},9000);
		$global.console.log("log");
		$global.console.warn("warn");
		$global.console.error("error");
		$global.console.info("info");
		$global.console.log("deel 1/2","deel 2/2");
		$global.console.log("part 1/3","part 2/3","part 3/3");
		let obj = { prop1 : "prop1Value", prop2 : "prop2Value", child : { childProp1 : "childProp1Value"}};
		$global.console.log(obj);
		console.log("src/MonkeeBuggerTest.hx:36:","trace");
	}
	static main() {
		window.document.addEventListener("DOMContentLoaded",function(event) {
			let app = new MonkeeBuggerTest();
		});
	}
}
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
MonkeeBuggerTest.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=test_monkee_bugger.js.map