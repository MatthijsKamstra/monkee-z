// Generated by Haxe 4.2.2
(function ($hx_exports, $global) { "use strict";
Math.__name__ = true;
class MonkeeGui {
	constructor(x,y,parent) {
		this.css = ".monkee-gui-wrapper {\n  border: 1px solid silver;\n  /* width: calc(100% - 2px); */\n}\n\n.monkee-gui-wrapper {\n}\n";
		this._x = x;
		this._y = y;
		this._parent = parent;
		this.createWrapper();
	}
	createWrapper() {
		let style = window.document.createElement("style");
		style.innerHTML = this.css;
		window.document.body.append(style);
		this._wrapper = window.document.createElement("div");
		this._wrapper.className = "monkee-gui-wrapper";
		this._parent.appendChild(this._wrapper);
	}
	range(title,min,max,value,step,callback) {
		let range = new gui_Range(title,min,max,value,step,callback);
		range.add(this._wrapper);
		return range;
	}
	inputRange(title,min,max,value,step,callback) {
		return this.range(title,min,max,value,step,callback);
	}
	number(title,min,max,value,step,callback) {
		let el = new gui_Number(title,min,max,value,step,callback);
		el.add(this._wrapper);
		return el;
	}
	inputNumber(title,min,max,value,step,callback) {
		return this.number(title,min,max,value,step,callback);
	}
	rangeNumber(title,min,max,value,step,callback) {
		let el = new gui_RangeNumber(title,min,max,value,step,callback);
		el.add(this._wrapper);
		return el;
	}
	inputRangeNumber(title,min,max,value,step,callback) {
		return this.rangeNumber(title,min,max,value,step,callback);
	}
	button(title,callback) {
		let el = new gui_Button(title,callback);
		el.add(this._wrapper);
		return el;
	}
	inputButton(title,callback) {
		return this.button(title,callback);
	}
	textArea(title,value,callback) {
		let el = new gui_TextArea(title,value,callback);
		el.add(this._wrapper);
		return el;
	}
	text(title,value,callback) {
		let el = new gui_Text(title,value,callback);
		el.add(this._wrapper);
		return el;
	}
	inputtext(title,value,callback) {
		return this.text(title,value,callback);
	}
	image(title,url) {
		let el = new gui_Image(title,url);
		el.add(this._wrapper);
		return el;
	}
	static create(x,y,parent) {
		let monkeeGui = new MonkeeGui(x,y,parent);
		return monkeeGui;
	}
}
$hx_exports["MonkeeGui"] = MonkeeGui;
MonkeeGui.__name__ = true;
Object.assign(MonkeeGui.prototype, {
	__class__: MonkeeGui
});
class MonkeeGuiTest {
	constructor() {
		this.cellDepth = 70;
		this.cellHeight = 60;
		this.cellWidth = 50;
		this.description = "Description here\nand here\nand another here";
		this.patternName = "Pattern name here";
		this.title = "Title here";
		this.initGui();
		this.initGui2();
	}
	initGui() {
		let gui = MonkeeGui.create(0,0,window.document.getElementById("monkee-gui"));
		gui.range("range",20,100,60,1,$bind(this,this.onChangeSizeHandler));
		gui.number("number",20,100,70,1,$bind(this,this.onChangeSizeHandler));
		gui.inputRangeNumber("range number",20,100,70,1,$bind(this,this.onChangeSizeHandler));
		gui.button("Export 2 SVG",$bind(this,this.export2svg));
		gui.text("Text","text");
		gui.text("Disabled text","disabled").disabled();
		gui.text("Title",this.title).update(this,"title").onUpdateHandler($bind(this,this.draw));
		gui.textArea("Description",this.description).disabled();
		gui.image("Title name","https://picsum.photos/300/200");
	}
	initGui2() {
		let gui = MonkeeGui.create(0,0,window.document.getElementById("monkee-gui-2"));
		gui.text("Pattern name",this.patternName).disabled().listen(this,"patternName");
		gui.text("Title",this.title).disabled().listen(this,"title");
	}
	onChangeSizeHandler(e) {
		let value = (js_Boot.__cast(e , HTMLInputElement)).value;
		let v = parseFloat(value);
		this.cellWidth = v;
		this.cellHeight = v;
		this.cellDepth = v;
		this.draw();
	}
	draw() {
		$global.console.log("DRAW");
	}
	export2svg() {
		$global.console.log("EXPORT SVG");
	}
	export2png() {
		$global.console.log("EXPORT PNG");
	}
	export2jpg() {
		$global.console.log("EXPORT JPEG");
	}
	static main() {
		let app = new MonkeeGuiTest();
	}
}
$hx_exports["MonkeeGuiTest"] = MonkeeGuiTest;
MonkeeGuiTest.__name__ = true;
Object.assign(MonkeeGuiTest.prototype, {
	__class__: MonkeeGuiTest
});
class Reflect {
	static setProperty(o,field,value) {
		let tmp;
		let tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class gui_Button {
	constructor(title,callback) {
		this.title = title;
		this.callback = callback;
		gui_Button.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let input = window.document.createElement("button");
		input.type = "button";
		input.id = "" + this.title + "_" + gui_Button.ID;
		input.name = "" + this.title;
		input.innerText = "" + this.title;
		input.onclick = this.callback;
		div.appendChild(input);
	}
}
gui_Button.__name__ = true;
Object.assign(gui_Button.prototype, {
	__class__: gui_Button
});
class gui_IGuiBase {
}
gui_IGuiBase.__name__ = true;
gui_IGuiBase.__isInterface__ = true;
class gui_Image {
	constructor(title,url) {
		this.title = title;
		this.url = url;
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let img = window.document.createElement("img");
		img.src = "" + this.url;
		img.name = "" + this.title;
		img.alt = "" + this.title;
		img.className = "form-img img-fluid";
		div.appendChild(img);
		div.appendChild(img);
	}
}
gui_Image.__name__ = true;
Object.assign(gui_Image.prototype, {
	__class__: gui_Image
});
class gui_Number {
	constructor(title,min,max,value,step,callback) {
		this.title = title;
		this.min = min;
		this.max = max;
		this.value = value;
		this.step = step;
		this.callback = callback;
		gui_Number.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title + "_" + gui_Number.ID;
		label.className = "form-label";
		label.innerText = "" + this.title + " (between " + (this.min | 0) + " and " + (this.max | 0) + "):";
		div.appendChild(label);
		let input = window.document.createElement("input");
		input.type = "number";
		input.id = "" + this.title + "_" + gui_Number.ID;
		input.name = "" + this.title;
		input.min = "" + this.min;
		input.max = "" + this.max;
		input.value = "" + this.value;
		input.step = "" + this.step;
		let _gthis = this;
		input.oninput = function() {
			_gthis.callback.apply(_gthis.callback,[input]);
		};
		div.appendChild(input);
	}
}
gui_Number.__name__ = true;
Object.assign(gui_Number.prototype, {
	__class__: gui_Number
});
class gui_Range {
	constructor(title,min,max,value,step,callback) {
		this.title = title;
		this.min = min;
		this.max = max;
		this.value = value;
		this.step = step;
		this.callback = callback;
		gui_Range.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title + "_" + gui_Range.ID;
		label.className = "form-label";
		label.innerText = "" + this.title + " (between " + (this.min | 0) + " and " + (this.max | 0) + "):";
		div.appendChild(label);
		let txt = window.document.createElement("span");
		txt.id = "" + this.title + "_" + gui_Range.ID + "_value";
		txt.innerText = "" + this.value;
		let input = window.document.createElement("input");
		input.type = "range";
		label.className = "form-range";
		input.id = "" + this.title + "_" + gui_Range.ID;
		input.name = "" + this.title;
		input.min = "" + this.min;
		input.max = "" + this.max;
		input.value = "" + this.value;
		input.step = "" + this.step;
		let _gthis = this;
		input.oninput = function() {
			txt.innerHTML = this.value;
			_gthis.callback.apply(_gthis.callback,[input]);
		};
		div.appendChild(input);
		div.appendChild(txt);
	}
}
gui_Range.__name__ = true;
Object.assign(gui_Range.prototype, {
	__class__: gui_Range
});
class gui_RangeNumber {
	constructor(title,min,max,value,step,callback) {
		this.title = title;
		this.min = min;
		this.max = max;
		this.value = value;
		this.step = step;
		this.callback = callback;
		gui_RangeNumber.ID++;
		this.init();
	}
	init() {
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title + "_" + gui_RangeNumber.ID;
		label.className = "form-label";
		label.innerText = "" + this.title + " (between " + (this.min | 0) + " and " + (this.max | 0) + "):";
		div.appendChild(label);
		let input = window.document.createElement("input");
		let inputNr = window.document.createElement("input");
		inputNr.type = "number";
		label.className = "form-Number";
		inputNr.id = "" + this.title + "_" + gui_RangeNumber.ID;
		inputNr.name = "" + this.title;
		inputNr.min = "" + this.min;
		inputNr.max = "" + this.max;
		inputNr.value = "" + this.value;
		inputNr.step = "" + this.step;
		let _gthis = this;
		inputNr.oninput = function() {
			input.value = this.value;
			_gthis.callback.apply(_gthis.callback,[inputNr]);
		};
		input.type = "range";
		label.className = "form-range";
		input.id = "" + this.title + "_" + gui_RangeNumber.ID;
		input.name = "" + this.title;
		input.min = "" + this.min;
		input.max = "" + this.max;
		input.value = "" + this.value;
		input.step = "" + this.step;
		input.oninput = function() {
			inputNr.value = this.value;
			_gthis.callback.apply(_gthis.callback,[input]);
		};
		div.appendChild(input);
		div.appendChild(inputNr);
	}
}
gui_RangeNumber.__name__ = true;
Object.assign(gui_RangeNumber.prototype, {
	__class__: gui_RangeNumber
});
class gui_Text {
	constructor(title,value,callback) {
		this.isAutoUpdate = false;
		this.title = title;
		this.value = value;
		this.callback = callback;
		this.init();
	}
	init() {
	}
	disabled(isDisabled) {
		if(isDisabled == null) {
			isDisabled = true;
		}
		this.input.disabled = isDisabled;
		return this;
	}
	listen(scope,value) {
		$global.console.warn("Text.listen() --> WIP");
		return this;
	}
	update(scope,value) {
		this.scope = scope;
		this.stringValue = value;
		this.isAutoUpdate = true;
		return this;
	}
	onUpdateHandler(handler) {
		this.updateHandler = handler;
		return this;
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title;
		label.className = "form-label";
		label.innerText = "" + this.title;
		div.appendChild(label);
		this.input = window.document.createElement("input");
		this.input.type = "text";
		this.input.id = "" + this.title;
		this.input.name = "" + this.title;
		this.input.value = "" + this.value;
		let _gthis = this;
		this.input.oninput = function() {
			if(_gthis.isAutoUpdate) {
				Reflect.setProperty(_gthis.scope,_gthis.stringValue,_gthis.input.value);
			}
			if(_gthis.updateHandler != null) {
				_gthis.updateHandler.apply(_gthis.updateHandler,[_gthis.input]);
			}
			if(_gthis.callback != null) {
				_gthis.callback.apply(_gthis.callback,[_gthis.input]);
			}
		};
		div.appendChild(this.input);
	}
}
gui_Text.__name__ = true;
Object.assign(gui_Text.prototype, {
	__class__: gui_Text
});
class gui_TextArea {
	constructor(title,value,callback) {
		this.title = title;
		this.value = value;
		this.callback = callback;
	}
	add(parent) {
		let div = window.document.createElement("div");
		parent.appendChild(div);
		let label = window.document.createElement("label");
		label.htmlFor = "" + this.title;
		label.className = "form-label";
		label.innerText = "" + this.title;
		div.appendChild(label);
		this.textAreaEl = window.document.createElement("textarea");
		this.textAreaEl.id = "" + this.title;
		this.textAreaEl.name = "" + this.title;
		this.textAreaEl.value = "" + this.value;
		div.appendChild(this.textAreaEl);
	}
	disabled(isDisabled) {
		if(isDisabled == null) {
			isDisabled = true;
		}
		this.textAreaEl.disabled = isDisabled;
		return this;
	}
}
gui_TextArea.__name__ = true;
gui_TextArea.__interfaces__ = [gui_IGuiBase];
Object.assign(gui_TextArea.prototype, {
	__class__: gui_TextArea
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	get_native() {
		return this.__nativeException;
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
	,__properties__: {get_native: "get_native"}
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
}
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
{
	String.prototype.__class__ = String;
	String.__name__ = true;
	Array.__name__ = true;
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
gui_Button.ID = 0;
gui_Number.ID = 0;
gui_Range.ID = 0;
gui_RangeNumber.ID = 0;
MonkeeGuiTest.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=monkee_gui_test.js.map