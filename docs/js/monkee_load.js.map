{
"version":3,
"file":"monkee_load.js",
"sourceRoot":"file:///",
"sources":["/usr/local/lib/haxe/std/Lambda.hx","/Users/matthijs/Documents/GIT/monkee-z/src/MonkeeLoad.hx","/usr/local/lib/haxe/std/js/_std/Reflect.hx","/usr/local/lib/haxe/std/js/_std/Std.hx","/usr/local/lib/haxe/std/StringTools.hx","/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx","/Users/matthijs/Documents/GIT/monkee-z/src/utils/Html.hx","/Users/matthijs/Documents/GIT/monkee-z/src/utils/JsonPath.hx","/Users/matthijs/Documents/GIT/monkee-z/src/utils/Throbber.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.ds.List;\n\n/**\n\tThe `Lambda` class is a collection of methods to support functional\n\tprogramming. It is ideally used with `using Lambda` and then acts as an\n\textension to Iterable types.\n\n\tOn static platforms, working with the Iterable structure might be slower\n\tthan performing the operations directly on known types, such as Array and\n\tList.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n\n\t@see https://haxe.org/manual/std-Lambda.html\n**/\nclass Lambda {\n\t/**\n\t\tCreates an Array from Iterable `it`.\n\n\t\tIf `it` is an Array, this function returns a copy of it.\n\t**/\n\tpublic static function array<A>(it:Iterable<A>):Array<A> {\n\t\tvar a = new Array<A>();\n\t\tfor (i in it)\n\t\t\ta.push(i);\n\t\treturn a;\n\t}\n\n\t/**\n\t\tCreates a List form Iterable `it`.\n\n\t\tIf `it` is a List, this function returns a copy of it.\n\t**/\n\tpublic static function list<A>(it:Iterable<A>):List<A> {\n\t\tvar l = new List<A>();\n\t\tfor (i in it)\n\t\t\tl.add(i);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tCreates a new Array by applying function `f` to all elements of `it`.\n\t\tThe order of elements is preserved.\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static inline function map<A, B>(it:Iterable<A>, f:(item:A) -> B):Array<B> {\n\t\treturn [for (x in it) f(x)];\n\t}\n\n\t/**\n\t\tSimilar to map, but also passes the index of each element to `f`.\n\t\tThe order of elements is preserved.\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static inline function mapi<A, B>(it:Iterable<A>, f:(index:Int, item:A) -> B):Array<B> {\n\t\tvar i = 0;\n\t\treturn [for (x in it) f(i++, x)];\n\t}\n\n\t/**\n\t\tConcatenate a list of iterables.\n\t\tThe order of elements is preserved.\n\t**/\n\tpublic static inline function flatten<A>(it:Iterable<Iterable<A>>):Array<A> {\n\t\treturn [for (e in it) for (x in e) x];\n\t}\n\n\t/**\n\t\tA composition of map and flatten.\n\t\tThe order of elements is preserved.\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static inline function flatMap<A, B>(it:Iterable<A>, f:(item:A) -> Iterable<B>):Array<B> {\n\t\treturn Lambda.flatten(Lambda.map(it, f));\n\t}\n\n\t/**\n\t\tTells if `it` contains `elt`.\n\n\t\tThis function returns true as soon as an element is found which is equal\n\t\tto `elt` according to the `==` operator.\n\n\t\tIf no such element is found, the result is false.\n\t**/\n\tpublic static function has<A>(it:Iterable<A>, elt:A):Bool {\n\t\tfor (x in it)\n\t\t\tif (x == elt)\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `it` contains an element for which `f` is true.\n\n\t\tThis function returns true as soon as an element is found for which a\n\t\tcall to `f` returns true.\n\n\t\tIf no such element is found, the result is false.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function exists<A>(it:Iterable<A>, f:(item:A) -> Bool) {\n\t\tfor (x in it)\n\t\t\tif (f(x))\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `f` is true for all elements of `it`.\n\n\t\tThis function returns false as soon as an element is found for which a\n\t\tcall to `f` returns false.\n\n\t\tIf no such element is found, the result is true.\n\n\t\tIn particular, this function always returns true if `it` is empty.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function foreach<A>(it:Iterable<A>, f:(item:A) -> Bool) {\n\t\tfor (x in it)\n\t\t\tif (!f(x))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tCalls `f` on all elements of `it`, in order.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function iter<A>(it:Iterable<A>, f:(item:A) -> Void) {\n\t\tfor (x in it)\n\t\t\tf(x);\n\t}\n\n\t/**\n\t\tReturns a Array containing those elements of `it` for which `f` returned\n\t\ttrue.\n\t\tIf `it` is empty, the result is the empty Array even if `f` is null.\n\t\tOtherwise if `f` is null, the result is unspecified.\n\t**/\n\tpublic static function filter<A>(it:Iterable<A>, f:(item:A) -> Bool) {\n\t\treturn [for (x in it) if (f(x)) x];\n\t}\n\n\t/**\n\t\tFunctional fold on Iterable `it`, using function `f` with start argument\n\t\t`first`.\n\n\t\tIf `it` has no elements, the result is `first`.\n\n\t\tOtherwise the first element of `it` is passed to `f` alongside `first`.\n\t\tThe result of that call is then passed to `f` with the next element of\n\t\t`it`, and so on until `it` has no more elements.\n\n\t\tIf `it` or `f` are null, the result is unspecified.\n\t**/\n\tpublic static function fold<A, B>(it:Iterable<A>, f:(item:A, result:B) -> B, first:B):B {\n\t\tfor (x in it)\n\t\t\tfirst = f(x, first);\n\t\treturn first;\n\t}\n\n\t/**\n\t\tSimilar to fold, but also passes the index of each element to `f`.\n\n\t\tIf `it` or `f` are null, the result is unspecified.\n\t**/\n\tpublic static function foldi<A, B>(it:Iterable<A>, f:(item:A, result:B, index:Int) -> B, first:B):B {\n\t\tvar i = 0;\n\t\tfor (x in it) {\n\t\t\tfirst = f(x, first, i);\n\t\t\t++i;\n\t\t}\n\t\treturn first;\n\t}\n\n\t/**\n\t\tReturns the number of elements in `it` for which `pred` is true, or the\n\t\ttotal number of elements in `it` if `pred` is null.\n\n\t\tThis function traverses all elements.\n\t**/\n\tpublic static function count<A>(it:Iterable<A>, ?pred:(item:A) -> Bool) {\n\t\tvar n = 0;\n\t\tif (pred == null)\n\t\t\tfor (_ in it)\n\t\t\t\tn++;\n\t\telse\n\t\t\tfor (x in it)\n\t\t\t\tif (pred(x))\n\t\t\t\t\tn++;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tTells if Iterable `it` does not contain any element.\n\t**/\n\tpublic static function empty<T>(it:Iterable<T>):Bool {\n\t\treturn !it.iterator().hasNext();\n\t}\n\n\t/**\n\t\tReturns the index of the first element `v` within Iterable `it`.\n\n\t\tThis function uses operator `==` to check for equality.\n\n\t\tIf `v` does not exist in `it`, the result is -1.\n\t**/\n\tpublic static function indexOf<T>(it:Iterable<T>, v:T):Int {\n\t\tvar i = 0;\n\t\tfor (v2 in it) {\n\t\t\tif (v == v2)\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t\tReturns the first element of `it` for which `f` is true.\n\n\t\tThis function returns as soon as an element is found for which a call to\n\t\t`f` returns true.\n\n\t\tIf no such element is found, the result is null.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function find<T>(it:Iterable<T>, f:(item:T) -> Bool):Null<T> {\n\t\tfor (v in it) {\n\t\t\tif (f(v))\n\t\t\t\treturn v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tReturns the index of the first element of `it` for which `f` is true.\n\n\t\tThis function returns as soon as an element is found for which a call to\n\t\t`f` returns true.\n\n\t\tIf no such element is found, the result is -1.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function findIndex<T>(it:Iterable<T>, f:(item:T) -> Bool):Int {\n\t\tvar i = 0;\n\t\tfor (v in it) {\n\t\t\tif (f(v))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t\tReturns a new Array containing all elements of Iterable `a` followed by\n\t\tall elements of Iterable `b`.\n\n\t\tIf `a` or `b` are null, the result is unspecified.\n\t**/\n\tpublic static function concat<T>(a:Iterable<T>, b:Iterable<T>):Array<T> {\n\t\tvar l = new Array();\n\t\tfor (x in a)\n\t\t\tl.push(x);\n\t\tfor (x in b)\n\t\t\tl.push(x);\n\t\treturn l;\n\t}\n}\n","package;\n\nimport utils.Html;\nimport utils.JsonPath;\nimport haxe.Json;\nimport js.html.InputElement;\nimport utils.Time;\nimport utils.Throbber;\nimport js.html.Element;\nimport js.Browser.*;\nimport js.html.XMLHttpRequest;\nimport AST.LoadObj;\n\nusing StringTools;\nusing Lambda;\n\nclass MonkeeLoad {\n\tvar DEBUG = true;\n\n\t// do we need this?\n\t// var config = {\n\t// \tinner: 'data-load-inner', // inner\n\t// \touter: 'data-load', // outer\n\t// \treplace: 'data-load-replace' // outer\n\t// }\n\tvar arr = ['data-load', 'data-load-replace', 'data-load-inner'];\n\tvar req = new XMLHttpRequest();\n\tvar loadingArr:Array<LoadObj> = [];\n\tvar loadingId = 0;\n\n\tpublic function new() {\n\t\tif (DEBUG)\n\t\t\tconsole.info(App.callIn('MonkeeLoad'));\n\n\t\tfor (i in 0...arr.length) {\n\t\t\tvar _configName = arr[i];\n\t\t\tvar _elements = document.querySelectorAll('[${_configName}]');\n\t\t\tfor (i in 0..._elements.length) {\n\t\t\t\tvar _el:Element = cast _elements[i];\n\t\t\t\tvar _url = _el.getAttribute(_configName);\n\t\t\t\tvar _isJson = _url.indexOf('.json') != -1;\n\t\t\t\tvar _target = _el.getAttribute('data-target');\n\t\t\t\tvar _nameArr:Array<Element> = cast _el.querySelectorAll('[data-name]');\n\t\t\t\tvar _loadObj:LoadObj = {\n\t\t\t\t\tel: _el,\n\t\t\t\t\turl: _url,\n\t\t\t\t\tisJson: _isJson,\n\t\t\t\t\tisInner: (_configName == 'data-load-inner'),\n\t\t\t\t\tloaderType: ('data-load-inner' == _configName) ? 'inner' : 'outer',\n\t\t\t\t\ttarget: _target,\n\t\t\t\t\tnames: _nameArr,\n\t\t\t\t\tthrobber: Throbber.set(_el),\n\t\t\t\t}\n\t\t\t\t// if (_isJson) {}\n\t\t\t\tloadingArr.push(_loadObj);\n\t\t\t\ttrace(loadingArr);\n\t\t\t}\n\t\t}\n\t\tstartLoading(loadingId);\n\t}\n\n\tfunction startLoading(nr:Int) {\n\t\tif (nr >= loadingArr.length) {\n\t\t\treturn;\n\t\t}\n\t\tloadData(loadingArr[nr]);\n\t\tloadingId++;\n\t}\n\n\tfunction loadData(obj:LoadObj) {\n\t\treq.open('GET', obj.url);\n\t\treq.onload = function() {\n\t\t\t// remove throbber\n\t\t\tif (obj.throbber != null)\n\t\t\t\tobj.throbber.parentElement.removeChild(obj.throbber);\n\n\t\t\t// body\n\t\t\tvar body = Html.getBody(req.response);\n\t\t\tif (body == \"\")\n\t\t\t\tbody = req.response;\n\n\t\t\t// Html.processHTML(obj.el, body, obj.loaderType == 'inner');\n\n\t\t\tif (obj.isJson) {\n\t\t\t\tif (DEBUG)\n\t\t\t\t\tconsole.warn(obj.url);\n\n\t\t\t\tjsonConvert(obj, req.response);\n\t\t\t} else {\n\t\t\t\t// inject code\n\t\t\t\tif (obj.names.length > 0) {\n\t\t\t\t\tfor (i in 0...obj.names.length) {\n\t\t\t\t\t\tvar el = obj.names[i];\n\t\t\t\t\t\tHtml.processHTML(el, body, obj.isInner);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tHtml.processHTML(obj.el, body, obj.isInner);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// load the next\n\t\t\tstartLoading(loadingId);\n\t\t};\n\n\t\treq.onerror = function(error) {\n\t\t\t// if (DEBUG)\n\t\t\tconsole.error('error: $error');\n\t\t};\n\n\t\treq.send();\n\t}\n\n\tfunction jsonConvert(obj:LoadObj, str:String) {\n\t\tvar json = Json.parse(str);\n\n\t\t// if (DEBUG) {\n\t\t// \t// console.warn(json);\n\t\t// \t// trace(json.firstname);\n\t\t// \t// trace(Reflect.getProperty(json, 'firstname'));\n\t\t// \t// trace(untyped json['lastname']);\n\t\t// }\n\t\tif (obj.names.length > 0) {\n\t\t\tfor (i in 0...obj.names.length) {\n\t\t\t\t// trace(obj.names[i]);\n\t\t\t\t// trace(obj.names[i].nodeName);\n\t\t\t\t// trace(obj.names[i].tagName);\n\t\t\t\tvar tag = obj.names[i].tagName.toLowerCase();\n\t\t\t\tswitch (tag) {\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\t// trace('input');\n\t\t\t\t\t\tvar input:InputElement = cast obj.names[i];\n\t\t\t\t\t\t// input.value = Reflect.getProperty(json, input.getAttribute('data-name'));\n\t\t\t\t\t\tinput.value = untyped json[input.getAttribute('data-name')];\n\t\t\t\t\t// case 'code', 'pre':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// trace(\"case '\" + tag + \"': trace ('\" + tag + \"');\");\n\t\t\t\t\t\t// trace('code');\n\t\t\t\t\t\tvar el = cast obj.names[i];\n\t\t\t\t\t\tvar attr:String = el.getAttribute('data-name');\n\t\t\t\t\t\tvar data = JsonPath.search(Json.stringify(json), attr);\n\t\t\t\t\t\tel.innerHTML = data;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tHtml.processHTML(obj.el, str, true);\n\t\t}\n\t}\n\n\tstatic public function main() {\n\t\tdocument.addEventListener('DOMContentLoaded', (event) -> {\n\t\t\tvar app = new MonkeeLoad();\n\t\t});\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\t@:pure\n\tpublic inline static function hasField(o:Dynamic, field:String):Bool {\n\t\treturn js.lib.Object.prototype.hasOwnProperty.call(o, field);\n\t}\n\n\t@:pure\n\tpublic static function field(o:Dynamic, field:String):Dynamic {\n\t\ttry\n\t\t\treturn o[cast field]\n\t\tcatch (e:Dynamic)\n\t\t\treturn null;\n\t}\n\n\tpublic inline static function setField(o:Dynamic, field:String, value:Dynamic):Void {\n\t\to[cast field] = value;\n\t}\n\n\tpublic static function getProperty(o:Dynamic, field:String):Dynamic\n\t\tuntyped {\n\t\t\tvar tmp;\n\t\t\treturn if (o == null) __define_feature__(\"Reflect.getProperty\",\n\t\t\t\tnull) else if (o.__properties__ && (tmp = o.__properties__[\"get_\" + field])) o[tmp]() else o[field];\n\t\t}\n\n\tpublic static function setProperty(o:Dynamic, field:String, value:Dynamic):Void\n\t\tuntyped {\n\t\t\tvar tmp;\n\t\t\tif (o.__properties__ && (tmp = o.__properties__[\"set_\" + field]))\n\t\t\t\to[tmp](value)\n\t\t\telse\n\t\t\t\to[field] = __define_feature__(\"Reflect.setProperty\", value);\n\t\t}\n\n\tpublic inline static function callMethod(o:Dynamic, func:haxe.Constraints.Function, args:Array<Dynamic>):Dynamic {\n\t\treturn (cast func : js.lib.Function).apply(o, args);\n\t}\n\n\tpublic static function fields(o:Dynamic):Array<String> {\n\t\tvar a = [];\n\t\tif (o != null)\n\t\t\tuntyped {\n\t\t\t\tvar hasOwnProperty = js.lib.Object.prototype.hasOwnProperty;\n\t\t\t\tjs.Syntax.code(\"for( var f in o ) {\");\n\t\t\t\tif (f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f))\n\t\t\t\t\ta.push(f);\n\t\t\t\tjs.Syntax.code(\"}\");\n\t\t\t}\n\t\treturn a;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isFunction(f:Dynamic):Bool {\n\t\treturn js.Syntax.typeof(f) == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>(a:T, b:T):Int {\n\t\treturn (a == b) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods(f1:Dynamic, f2:Dynamic):Bool {\n\t\tif (f1 == f2)\n\t\t\treturn true;\n\t\tif (!isFunction(f1) || !isFunction(f2))\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\t@:access(js.Boot)\n\tpublic static function isObject(v:Dynamic):Bool {\n\t\tif (v == null)\n\t\t\treturn false;\n\t\tvar t = js.Syntax.typeof(v);\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null))\n\t\t\t|| (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue(v:Dynamic):Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField(o:Dynamic, field:String):Bool {\n\t\tif (!hasField(o, field))\n\t\t\treturn false;\n\t\tjs.Syntax.delete(o, field);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>(o:Null<T>):Null<T> {\n\t\tif (o == null)\n\t\t\treturn null;\n\t\tvar o2:Dynamic = {};\n\t\tfor (f in Reflect.fields(o))\n\t\t\tReflect.setField(o2, f, Reflect.field(o, f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function(f:Array<Dynamic>->Void):Dynamic {})\n\tpublic static function makeVarArgs(f:Array<Dynamic>->Dynamic):Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(js.Syntax.code(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport js.Boot;\nimport js.Syntax;\n\n@:keepInit\n@:coreApi class Std {\n\tpublic static inline function is(v:Dynamic, t:Dynamic):Bool {\n\t\treturn isOfType(v, t);\n\t}\n\n\tpublic static inline function isOfType(v:Dynamic, t:Dynamic):Bool {\n\t\treturn @:privateAccess js.Boot.__instanceof(v, t);\n\t}\n\n\tpublic static inline function downcast<T:{}, S:T>(value:T, c:Class<S>):S@:privateAccess {\n\t\treturn if (js.Boot.__downcastCheck(value, c)) cast value else null;\n\t}\n\n\t@:deprecated('Std.instance() is deprecated. Use Std.downcast() instead.')\n\tpublic static inline function instance<T:{}, S:T>(value:T, c:Class<S>):S {\n\t\treturn downcast(value, c);\n\t}\n\n\t@:pure\n\tpublic static function string(s:Dynamic):String {\n\t\treturn @:privateAccess js.Boot.__string_rec(s, \"\");\n\t}\n\n\tpublic static inline function int(x:Float):Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\t@:pure\n\tpublic static function parseInt(x:String):Null<Int> {\n\t\tif(x != null) {\n\t\t\tfor(i in 0...x.length) {\n\t\t\t\tvar c = StringTools.fastCodeAt(x, i);\n\t\t\t\tif(c <= 8 || (c >= 14 && c != ' '.code && c != '-'.code)) {\n\t\t\t\t\tvar nc = StringTools.fastCodeAt(x, i + 1);\n\t\t\t\t\tvar v = js.Lib.parseInt(x, (nc == \"x\".code || nc == \"X\".code) ? 16 : 10);\n\t\t\t\t\treturn Math.isNaN(v) ? null : cast v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static inline function parseFloat(x:String):Float {\n\t\treturn js.Syntax.code(\"parseFloat({0})\", x);\n\t}\n\n\tpublic static function random(x:Int):Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random() * x);\n\t}\n\n\tstatic function __init__():Void\n\t\tuntyped {\n\t\t\t__feature__(\"js.Boot.getClass\", String.prototype.__class__ = __feature__(\"Type.resolveClass\", $hxClasses[\"String\"] = String, String));\n\t\t\t__feature__(\"js.Boot.isClass\", String.__name__ = __feature__(\"Type.getClassName\", \"String\", true));\n\t\t\t__feature__(\"Type.resolveClass\", $hxClasses[\"Array\"] = Array);\n\t\t\t__feature__(\"js.Boot.isClass\", Array.__name__ = __feature__(\"Type.getClassName\", \"Array\", true));\n\t\t\t__feature__(\"Date.*\", {\n\t\t\t\t__feature__(\"js.Boot.getClass\",\n\t\t\t\t\tjs.Syntax.code('Date').prototype.__class__ = __feature__(\"Type.resolveClass\", $hxClasses[\"Date\"] = js.Syntax.code('Date'), js.Syntax.code('Date')));\n\t\t\t\t__feature__(\"js.Boot.isClass\", js.Syntax.code('Date').__name__ = \"Date\");\n\t\t\t});\n\t\t\t__feature__(\"Int.*\", js.Syntax.code('var Int = { };'));\n\t\t\t__feature__(\"Dynamic.*\", js.Syntax.code('var Dynamic = { };'));\n\t\t\t__feature__(\"Float.*\", js.Syntax.code('var Float = Number'));\n\t\t\t__feature__(\"Bool.*\", js.Syntax.code('var Bool = Boolean'));\n\t\t\t__feature__(\"Class.*\", js.Syntax.code('var Class = { };'));\n\t\t\t__feature__(\"Enum.*\", js.Syntax.code('var Enum = { };'));\n\t\t\t#if (js_es < 5)\n\t\t\t__feature__(\"Array.map\", if (Array.prototype.map == null) Array.prototype.map = function(f) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (i in 0...__this__.length)\n\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\treturn a;\n\t\t\t});\n\t\t\t__feature__(\"Array.filter\", if (Array.prototype.filter == null) Array.prototype.filter = function(f) {\n\t\t\t\tvar a = [];\n\t\t\t\tfor (i in 0...__this__.length) {\n\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\tif (f(e))\n\t\t\t\t\t\ta.push(e);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t});\n\t\t\t#end\n\t\t}\n}\n","/*\n * Copyright (C)2005-2019 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nimport haxe.iterators.StringIterator;\nimport haxe.iterators.StringKeyValueIterator;\n\n#if cpp\nusing cpp.NativeString;\n#end\n\n/**\n\tThis class provides advanced methods on Strings. It is ideally used with\n\t`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)\n\tto the `String` class.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\nclass StringTools {\n\t/**\n\t\tEncode an URL by using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua && !eval) inline #end public static function urlEncode(s:String):String {\n\t\t#if flash\n\t\treturn untyped __global__[\"encodeURIComponent\"](s);\n\t\t#elseif neko\n\t\treturn untyped new String(_urlEncode(s.__s));\n\t\t#elseif js\n\t\treturn untyped encodeURIComponent(s);\n\t\t#elseif cpp\n\t\treturn untyped s.__URLEncode();\n\t\t#elseif java\n\t\treturn postProcessUrlEncode(java.net.URLEncoder.encode(s, \"UTF-8\"));\n\t\t#elseif cs\n\t\treturn untyped cs.system.Uri.EscapeDataString(s);\n\t\t#elseif python\n\t\treturn python.lib.urllib.Parse.quote(s, \"\");\n\t\t#elseif hl\n\t\tvar len = 0;\n\t\tvar b = @:privateAccess s.bytes.urlEncode(len);\n\t\treturn @:privateAccess String.__alloc__(b, len);\n\t\t#elseif lua\n\t\ts = lua.NativeStringTools.gsub(s, \"\\n\", \"\\r\\n\");\n\t\ts = lua.NativeStringTools.gsub(s, \"([^%w %-%_%.%~])\", function(c) {\n\t\t\treturn lua.NativeStringTools.format(\"%%%02X\", lua.NativeStringTools.byte(c) + '');\n\t\t});\n\t\ts = lua.NativeStringTools.gsub(s, \" \", \"+\");\n\t\treturn s;\n\t\t#else\n\t\treturn null;\n\t\t#end\n\t}\n\n\t#if java\n\tprivate static function postProcessUrlEncode(s:String):String {\n\t\tvar ret = new StringBuf();\n\t\tvar i = 0, len = s.length;\n\t\twhile (i < len) {\n\t\t\tswitch (_charAt(s, i++)) {\n\t\t\t\tcase '+'.code:\n\t\t\t\t\tret.add('%20');\n\t\t\t\tcase '%'.code if (i <= len - 2):\n\t\t\t\t\tvar c1 = _charAt(s, i++), c2 = _charAt(s, i++);\n\t\t\t\t\tswitch [c1, c2] {\n\t\t\t\t\t\tcase ['2'.code, '1'.code]:\n\t\t\t\t\t\t\tret.addChar('!'.code);\n\t\t\t\t\t\tcase ['2'.code, '7'.code]:\n\t\t\t\t\t\t\tret.addChar('\\''.code);\n\t\t\t\t\t\tcase ['2'.code, '8'.code]:\n\t\t\t\t\t\t\tret.addChar('('.code);\n\t\t\t\t\t\tcase ['2'.code, '9'.code]:\n\t\t\t\t\t\t\tret.addChar(')'.code);\n\t\t\t\t\t\tcase ['7'.code, 'E'.code] | ['7'.code, 'e'.code]:\n\t\t\t\t\t\t\tret.addChar('~'.code);\n\t\t\t\t\t\tcase _:\n\t\t\t\t\t\t\tret.addChar('%'.code);\n\t\t\t\t\t\t\tret.addChar(cast c1);\n\t\t\t\t\t\t\tret.addChar(cast c2);\n\t\t\t\t\t}\n\t\t\t\tcase var chr:\n\t\t\t\t\tret.addChar(cast chr);\n\t\t\t}\n\t\t}\n\t\treturn ret.toString();\n\t}\n\t#end\n\n\t/**\n\t\tDecode an URL using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua && !eval) inline #end public static function urlDecode(s:String):String {\n\t\t#if flash\n\t\treturn untyped __global__[\"decodeURIComponent\"](s.split(\"+\").join(\" \"));\n\t\t#elseif neko\n\t\treturn untyped new String(_urlDecode(s.__s));\n\t\t#elseif js\n\t\treturn untyped decodeURIComponent(s.split(\"+\").join(\" \"));\n\t\t#elseif cpp\n\t\treturn untyped s.__URLDecode();\n\t\t#elseif java\n\t\ttry\n\t\t\treturn java.net.URLDecoder.decode(s, \"UTF-8\")\n\t\tcatch (e:Dynamic)\n\t\t\tthrow e;\n\t\t#elseif cs\n\t\treturn untyped cs.system.Uri.UnescapeDataString(s);\n\t\t#elseif python\n\t\treturn python.lib.urllib.Parse.unquote(s);\n\t\t#elseif hl\n\t\tvar len = 0;\n\t\tvar b = @:privateAccess s.bytes.urlDecode(len);\n\t\treturn @:privateAccess String.__alloc__(b, len);\n\t\t#elseif lua\n\t\ts = lua.NativeStringTools.gsub(s, \"+\", \" \");\n\t\ts = lua.NativeStringTools.gsub(s, \"%%(%x%x)\", function(h) {\n\t\t\treturn lua.NativeStringTools.char(lua.Lua.tonumber(h, 16));\n\t\t});\n\t\ts = lua.NativeStringTools.gsub(s, \"\\r\\n\", \"\\n\");\n\t\treturn s;\n\t\t#else\n\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tEscapes HTML special characters of the string `s`.\n\n\t\tThe following replacements are made:\n\n\t\t- `&` becomes `&amp`;\n\t\t- `<` becomes `&lt`;\n\t\t- `>` becomes `&gt`;\n\n\t\tIf `quotes` is true, the following characters are also replaced:\n\n\t\t- `\"` becomes `&quot`;\n\t\t- `'` becomes `&#039`;\n\t**/\n\tpublic static function htmlEscape(s:String, ?quotes:Bool):String {\n\t\tvar buf = new StringBuf();\n\t\tfor (code in #if neko iterator(s) #else new haxe.iterators.StringIteratorUnicode(s) #end) {\n\t\t\tswitch (code) {\n\t\t\t\tcase '&'.code:\n\t\t\t\t\tbuf.add(\"&amp;\");\n\t\t\t\tcase '<'.code:\n\t\t\t\t\tbuf.add(\"&lt;\");\n\t\t\t\tcase '>'.code:\n\t\t\t\t\tbuf.add(\"&gt;\");\n\t\t\t\tcase '\"'.code if (quotes):\n\t\t\t\t\tbuf.add(\"&quot;\");\n\t\t\t\tcase '\\''.code if (quotes):\n\t\t\t\t\tbuf.add(\"&#039;\");\n\t\t\t\tcase _:\n\t\t\t\t\tbuf.addChar(code);\n\t\t\t}\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t\tUnescapes HTML special characters of the string `s`.\n\n\t\tThis is the inverse operation to htmlEscape, i.e. the following always\n\t\tholds: `htmlUnescape(htmlEscape(s)) == s`\n\n\t\tThe replacements follow:\n\n\t\t- `&amp;` becomes `&`\n\t\t- `&lt;` becomes `<`\n\t\t- `&gt;` becomes `>`\n\t\t- `&quot;` becomes `\"`\n\t\t- `&#039;` becomes `'`\n\t**/\n\tpublic static function htmlUnescape(s:String):String {\n\t\treturn s.split(\"&gt;\")\n\t\t\t.join(\">\")\n\t\t\t.split(\"&lt;\")\n\t\t\t.join(\"<\")\n\t\t\t.split(\"&quot;\")\n\t\t\t.join('\"')\n\t\t\t.split(\"&#039;\")\n\t\t\t.join(\"'\")\n\t\t\t.split(\"&amp;\")\n\t\t\t.join(\"&\");\n\t}\n\n\t/**\n\t\tReturns `true` if `s` contains `value` and  `false` otherwise.\n\n\t\tWhen `value` is `null`, the result is unspecified.\n\t**/\n\tpublic static inline function contains(s:String, value:String):Bool {\n\t\treturn s.indexOf(value) != -1;\n\t}\n\n\t/**\n\t\tTells if the string `s` starts with the string `start`.\n\n\t\tIf `start` is `null`, the result is unspecified.\n\n\t\tIf `start` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java || python) inline #end function startsWith(s:String, start:String):Bool {\n\t\t#if java\n\t\treturn (cast s : java.NativeString).startsWith(start);\n\t\t#elseif cs\n\t\treturn untyped s.StartsWith(start);\n\t\t#elseif cpp\n\t\tif (s.length < start.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str();\n\t\tvar p1 = start.c_str();\n\t\tfor (i in 0...start.length)\n\t\t\tif (p0.at(i) != p1.at(i))\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\treturn @:privateAccess (s.length >= start.length && s.bytes.compare(0, start.bytes, 0, start.length << 1) == 0);\n\t\t#elseif python\n\t\treturn python.NativeStringTools.startswith(s, start);\n\t\t#else\n\t\treturn (s.length >= start.length && s.lastIndexOf(start, 0) == 0);\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the string `s` ends with the string `end`.\n\n\t\tIf `end` is `null`, the result is unspecified.\n\n\t\tIf `end` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java || python) inline #end function endsWith(s:String, end:String):Bool {\n\t\t#if java\n\t\treturn (cast s : java.NativeString).endsWith(end);\n\t\t#elseif cs\n\t\treturn untyped s.EndsWith(end);\n\t\t#elseif hl\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn @:privateAccess (slen >= elen && s.bytes.compare((slen - elen) << 1, end.bytes, 0, elen << 1) == 0);\n\t\t#elseif python\n\t\treturn python.NativeStringTools.endswith(s, end);\n\t\t#else\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn (slen >= elen && s.indexOf(end, (slen - elen)) == (slen - elen));\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the character in the string `s` at position `pos` is a space.\n\n\t\tA character is considered to be a space character if its character code\n\t\tis 9,10,11,12,13 or 32.\n\n\t\tIf `s` is the empty String `\"\"`, or if pos is not a valid position within\n\t\t`s`, the result is false.\n\t**/\n\tpublic static function isSpace(s:String, pos:Int):Bool {\n\t\t#if (python || lua)\n\t\tif (s.length == 0 || pos < 0 || pos >= s.length)\n\t\t\treturn false;\n\t\t#end\n\t\tvar c = s.charCodeAt(pos);\n\t\treturn (c > 8 && c < 14) || c == 32;\n\t}\n\n\t/**\n\t\tRemoves leading space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function ltrim(s:String):String {\n\t\t#if cs\n\t\treturn untyped s.TrimStart();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile (r < l && isSpace(s, r)) {\n\t\t\tr++;\n\t\t}\n\t\tif (r > 0)\n\t\t\treturn s.substr(r, l - r);\n\t\telse\n\t\t\treturn s;\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves trailing space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function rtrim(s:String):String {\n\t\t#if cs\n\t\treturn untyped s.TrimEnd();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile (r < l && isSpace(s, l - r - 1)) {\n\t\t\tr++;\n\t\t}\n\t\tif (r > 0) {\n\t\t\treturn s.substr(0, l - r);\n\t\t} else {\n\t\t\treturn s;\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves leading and trailing space characters of `s`.\n\n\t\tThis is a convenience function for `ltrim(rtrim(s))`.\n\t**/\n\tpublic #if (cs || java) inline #end static function trim(s:String):String {\n\t\t#if cs\n\t\treturn untyped s.Trim();\n\t\t#elseif java\n\t\treturn (cast s : java.NativeString).trim();\n\t\t#else\n\t\treturn ltrim(rtrim(s));\n\t\t#end\n\t}\n\n\t/**\n\t\tConcatenates `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function lpad(s:String, c:String, l:Int):String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\tvar buf = new StringBuf();\n\t\tl -= s.length;\n\t\twhile (buf.length < l) {\n\t\t\tbuf.add(c);\n\t\t}\n\t\tbuf.add(s);\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t\tAppends `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function rpad(s:String, c:String, l:Int):String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\tvar buf = new StringBuf();\n\t\tbuf.add(s);\n\t\twhile (buf.length < l) {\n\t\t\tbuf.add(c);\n\t\t}\n\t\treturn buf.toString();\n\t}\n\n\t/**\n\t\tReplace all occurrences of the String `sub` in the String `s` by the\n\t\tString `by`.\n\n\t\tIf `sub` is the empty String `\"\"`, `by` is inserted after each character\n\t\tof `s` except the last one. If `by` is also the empty String `\"\"`, `s`\n\t\tremains unchanged.\n\n\t\tIf `sub` or `by` are null, the result is unspecified.\n\t**/\n\tpublic static function replace(s:String, sub:String, by:String):String {\n\t\t#if java\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn (cast s : java.NativeString).replace(sub, by);\n\t\t#elseif cs\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.Replace(sub, by);\n\t\t#else\n\t\treturn s.split(sub).join(by);\n\t\t#end\n\t}\n\n\t/**\n\t\tEncodes `n` into a hexadecimal representation.\n\n\t\tIf `digits` is specified, the resulting String is padded with \"0\" until\n\t\tits `length` equals `digits`.\n\t**/\n\tpublic static function hex(n:Int, ?digits:Int) {\n\t\t#if flash\n\t\tvar n:UInt = n;\n\t\tvar s:String = untyped n.toString(16);\n\t\ts = s.toUpperCase();\n\t\t#else\n\t\tvar s = \"\";\n\t\tvar hexChars = \"0123456789ABCDEF\";\n\t\tdo {\n\t\t\ts = hexChars.charAt(n & 15) + s;\n\t\t\tn >>>= 4;\n\t\t} while (n > 0);\n\t\t#end\n\t\t#if python\n\t\tif (digits != null && s.length < digits) {\n\t\t\tvar diff = digits - s.length;\n\t\t\tfor (_ in 0...diff) {\n\t\t\t\ts = \"0\" + s;\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif (digits != null)\n\t\t\twhile (s.length < digits)\n\t\t\t\ts = \"0\" + s;\n\t\t#end\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReturns the character code at position `index` of String `s`, or an\n\t\tend-of-file indicator at if `position` equals `s.length`.\n\n\t\tThis method is faster than `String.charCodeAt()` on some platforms, but\n\t\tthe result is unspecified if `index` is negative or greater than\n\t\t`s.length`.\n\n\t\tEnd of file status can be checked by calling `StringTools.isEof()` with\n\t\tthe returned value as argument.\n\n\t\tThis operation is not guaranteed to work if `s` contains the `\\0`\n\t\tcharacter.\n\t**/\n\tpublic static #if !eval inline #end function fastCodeAt(s:String, index:Int):Int {\n\t\t#if neko\n\t\treturn untyped __dollar__sget(s.__s, index);\n\t\t#elseif cpp\n\t\treturn untyped s.cca(index);\n\t\t#elseif flash\n\t\treturn untyped s.cca(index);\n\t\t#elseif java\n\t\treturn (index < s.length) ? cast(_charAt(s, index), Int) : -1;\n\t\t#elseif cs\n\t\treturn (cast(index, UInt) < s.length) ? cast(s[index], Int) : -1;\n\t\t#elseif js\n\t\treturn (cast s).charCodeAt(index);\n\t\t#elseif python\n\t\treturn if (index >= s.length) -1 else python.internal.UBuiltins.ord(python.Syntax.arrayAccess(s, index));\n\t\t#elseif hl\n\t\treturn @:privateAccess s.bytes.getUI16(index << 1);\n\t\t#elseif lua\n\t\t#if lua_vanilla\n\t\treturn lua.NativeStringTools.byte(s, index + 1);\n\t\t#else\n\t\treturn lua.lib.luautf8.Utf8.byte(s, index + 1);\n\t\t#end\n\t\t#else\n\t\treturn untyped s.cca(index);\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns an iterator of the char codes.\n\n\t\tNote that char codes may differ across platforms because of different\n\t\tinternal encoding of strings in different runtimes.\n\t\tFor the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.\n\t**/\n\tpublic static inline function iterator(s:String):StringIterator {\n\t\treturn new StringIterator(s);\n\t}\n\n\t/**\n\t\tReturns an iterator of the char indexes and codes.\n\n\t\tNote that char codes may differ across platforms because of different\n\t\tinternal encoding of strings in different of runtimes.\n\t\tFor the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.\n\t**/\n\tpublic static inline function keyValueIterator(s:String):StringKeyValueIterator {\n\t\treturn new StringKeyValueIterator(s);\n\t}\n\n\t/**\n\t\tTells if `c` represents the end-of-file (EOF) character.\n\t**/\n\t@:noUsing public static inline function isEof(c:Int):Bool {\n\t\t#if (flash || cpp || hl)\n\t\treturn c == 0;\n\t\t#elseif js\n\t\treturn c != c; // fast NaN\n\t\t#elseif (neko || lua || eval)\n\t\treturn c == null;\n\t\t#elseif (cs || java || python)\n\t\treturn c == -1;\n\t\t#else\n\t\treturn false;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Unix.\n\t\tThe input will be quoted, or escaped if necessary.\n\t**/\n\t@:noCompletion\n\t@:deprecated('StringTools.quoteUnixArg() is deprecated. Use haxe.SysTools.quoteUnixArg() instead.')\n\tpublic static function quoteUnixArg(argument:String):String {\n\t\treturn inline haxe.SysTools.quoteUnixArg(argument);\n\t}\n\n\t/**\n\t\tCharacter codes of the characters that will be escaped by `quoteWinArg(_, true)`.\n\t**/\n\t@:noCompletion\n\t@:deprecated('StringTools.winMetaCharacters is deprecated. Use haxe.SysTools.winMetaCharacters instead.')\n\tpublic static var winMetaCharacters:Array<Int> = cast haxe.SysTools.winMetaCharacters;\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Windows.\n\t\tThe input will be quoted, or escaped if necessary, such that the output\n\t\twill be parsed as a single argument using the rule specified in\n\t\thttp://msdn.microsoft.com/en-us/library/ms880421\n\n\t\tExamples:\n\t\t```haxe\n\t\tquoteWinArg(\"abc\") == \"abc\";\n\t\tquoteWinArg(\"ab c\") == '\"ab c\"';\n\t\t```\n\t**/\n\t@:noCompletion\n\t@:deprecated('StringTools.quoteWinArg() is deprecated. Use haxe.SysTools.quoteWinArg() instead.')\n\tpublic static function quoteWinArg(argument:String, escapeMetaCharacters:Bool):String {\n\t\treturn inline haxe.SysTools.quoteWinArg(argument, escapeMetaCharacters);\n\t}\n\n\t#if java\n\tprivate static inline function _charAt(str:String, idx:Int):java.StdTypes.Char16\n\t\treturn (cast str : java.NativeString).charAt(idx);\n\t#end\n\n\t#if neko\n\tprivate static var _urlEncode = neko.Lib.load(\"std\", \"url_encode\", 1);\n\tprivate static var _urlDecode = neko.Lib.load(\"std\", \"url_decode\", 1);\n\t#end\n\n\t#if utf16\n\tstatic inline var MIN_SURROGATE_CODE_POINT = 65536;\n\n\tstatic inline function utf16CodePointAt(s:String, index:Int):Int {\n\t\tvar c = StringTools.fastCodeAt(s, index);\n\t\tif (c >= 0xD800 && c <= 0xDBFF) {\n\t\t\tc = ((c - 0xD7C0) << 10) | (StringTools.fastCodeAt(s, index + 1) & 0x3FF);\n\t\t}\n\t\treturn c;\n\t}\n\t#end\n}\n","/*\n * Copyright (C)2005-2018 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.iterators;\n\n/**\n\tThis iterator is used only when `Array<T>` is passed to `Iterable<T>`\n**/\nclass ArrayIterator<T> {\n\tfinal array:Array<T>;\n\tvar current:Int = 0;\n\n\t/**\n\t\tCreate a new `ArrayIterator`.\n\t**/\n\t#if !hl inline #end\n\tpublic function new(array:Array<T>) {\n\t\tthis.array = array;\n\t}\n\n\t/**\n\t\tSee `Iterator.hasNext`\n\t**/\n\t#if !hl inline #end\n\tpublic function hasNext() {\n\t\treturn current < array.length;\n\t}\n\n\t/**\n\t\tSee `Iterator.next`\n\t**/\n\t#if !hl inline #end\n\tpublic function next() {\n\t\treturn array[current++];\n\t}\n}\n","package utils;\n\nimport js.html.Element;\nimport js.Browser.*;\nimport js.html.XMLHttpRequest;\n\nclass Html {\n\tpublic function new() {\n\t\t// your code\n\t}\n\n\t/**\n\t * extract the body (from documents that have a body)\n\t *\n\t * @param html\n\t */\n\tpublic static function getBody(html) {\n\t\tvar test:String = html.toLowerCase(); // to eliminate case sensitivity\n\t\tvar x:Int = test.indexOf(\"<body\");\n\t\tif (x == -1)\n\t\t\treturn \"\";\n\n\t\tx = test.indexOf(\">\", x);\n\t\tif (x == -1)\n\t\t\treturn \"\";\n\t\tvar y = test.lastIndexOf(\"</body>\");\n\t\tif (y == -1)\n\t\t\ty = test.lastIndexOf(\"</html>\");\n\t\tif (y == -1)\n\t\t\ty = html.length; // If no HTML then just grab everything till end\n\t\treturn html.slice(x + 1, y);\n\t}\n\n\t/**\n\t * [Description]\n\t * @param target\n\t * @param html\n\t * @param isInner\n\t */\n\tpublic static function processHTML(target:js.html.Element, html:String, isInner:Bool) {\n\t\tif (isInner) {\n\t\t\ttarget.innerHTML = html;\n\t\t} else {\n\t\t\ttarget.outerHTML = html;\n\t\t}\n\t}\n\n\t/**\n\t * [Description]\n\t * @param html\n\t * @param isInner = true\n\t */\n\tpublic static function htmlToElement(html:String, isInner = true) {\n\t\tvar template = document.createDivElement();\n\t\thtml = untyped html.trim(); // Never return a text node of whitespace as the result\n\t\tHtml.processHTML(template, html, isInner);\n\t\t// template.innerHTML = html;\n\t\treturn template.firstChild;\n\t}\n}\n","package utils;\n\nimport haxe.Json;\n\nusing StringTools;\nusing Lambda;\n\nclass JsonPath {\n\t// var _json:Any;\n\t// var _path:String;\n\t// /**\n\t//  * search in json for the correct value, return null if not\n\t//  *\n\t//  * @example\n\t//  *\n\t//  * \t\t\tvar data = JsonPath.search(str, 'i.want.data');\n\t//  *\n\t//  * @param jsonStr\n\t//  * @param path\n\t//  */\n\t// public function new(jsonStr:String, path:String) {\n\t// \t_json = Json.parse(jsonStr);\n\t// \t_path = path;\n\t// }\n\n\t/**\n\t * search in json for the correct value, return null if not\n\t *\n\t * convert a string value to path used in json.\n\t * can be an array as well\n\t *\n\t * @example\n\t * \t\t\tvar data = JsonPath.search(str, 'i.want.data');\n\t * \t\t\tvar arr:Array<Dynamic> = cast JsonPath.search(str, 'i.want.data[0]');\n\t *\n\t * @param jsonStr\n\t * @param path\n\t */\n\tpublic static function search(jsonStr:String, path:String) {\n\t\tvar result = Json.parse(jsonStr); // cloning the existing json\n\t\t// var result = json; // cloning the existing obj\n\n\t\t// trace('----> ' + path);\n\n\t\t// now split the path and iterate through keys\n\t\tpath.split(\".\").foreach(function(key) {\n\t\t\t// check for array, if not use the normal way\n\t\t\tif (key.indexOf('[') != -1) {\n\t\t\t\t// get the number in the string `films[1]`\n\t\t\t\tvar index = Std.parseInt(key.split('[')[1].replace(']', ''));\n\t\t\t\t// get the array name `films`\n\t\t\t\tkey = key.split('[')[0];\n\t\t\t\t// get the array\n\t\t\t\tvar arr = Reflect.field(result, key);\n\t\t\t\t// get the index array based on index\n\t\t\t\tresult = arr[index];\n\t\t\t\t// ask more than array has, return null\n\t\t\t\tif (index > arr.length)\n\t\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\t// trace(result);\n\t\t\t\t// trace(Reflect.hasField(result, key));\n\t\t\t\t// if (Reflect.hasField(result, key)) {\n\t\t\t\tif (!Reflect.hasField(result, key)) {\n\t\t\t\t\tresult = null;\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tresult = Reflect.field(result, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\t// trace(result);\n\t\treturn result;\n\t}\n\n\t// public static function go(jsonStr:String, path:String) {\n\t// \tvar d = new JsonPath(jsonStr, path);\n\t// \tvar result = d._json; // cloning the existing json\n\t// \ttrace('----> 2  ' + d._path);\n\t// \t// now split the path and iterate through keys\n\t// \td._path.split(\".\").foreach(function(key) {\n\t// \t\t// check for array, if not use the normal way\n\t// \t\tif (key.indexOf('[') != -1) {\n\t// \t\t\t// get the number in the string `films[1]`\n\t// \t\t\tvar index = Std.parseInt(key.split('[')[1].replace(']', ''));\n\t// \t\t\t// get the array name `films`\n\t// \t\t\tkey = key.split('[')[0];\n\t// \t\t\t// get the array\n\t// \t\t\tvar arr = Reflect.field(result, key);\n\t// \t\t\t// get the index array based on index\n\t// \t\t\tresult = arr[index];\n\t// \t\t} else {\n\t// \t\t\tresult = Reflect.field(result, key);\n\t// \t\t}\n\t// \t\treturn true;\n\t// \t});\n\t// \t// trace(result);\n\t// \treturn result;\n\t// }\n}\n","package utils;\n\nimport js.html.Element;\nimport js.Browser.*;\n\nclass Throbber {\n\tpublic static function set(el:Element):Element {\n\t\tvar _div = document.createDivElement();\n\t\t_div.className = 'loader';\n\t\tel.appendChild(_div);\n\t\treturn _div;\n\t}\n}\n"],
"names":[],
"mappings":";;;sBA+IuE;AAAA,EAC3D;AAD2D,EAC3D;AAAA,GAAV,SAAU;AAAA,GACT,EAAI,EAAC,EAAE,KACN;AAAA,WAAO;AAAP;AAFQ;AAD2D,EAIrE,OAAO;AAJ8D;;;eC/HvE;AAAA,EAYiB,AAAhB,iBAAgB;AAZjB,EAWiC,AAAhC,kBAAgC;AAXjC,EAUW,AAAV,WAAU;AAVX,EASW,AAAV,WAAU,CAAE,YAAa,oBAAqB;AAT/C,EACa,AAAZ,aAAY;AADb,EAeE,EAAI,aACH;AAAA,wBAAa,qBAAY,eAAZ;AAAb;AAhBH,EAkBY;AAlBZ,EAkBgB;AAlBhB,EAkBE,KAAK,CAAK,KAAI,KAAd;AAAA,GAAU;AAAV,GACC,kBAAkB,SAAI;AADvB,GAEC,gBAAgB,iCAA2B,MAAG,cAAY;AAF3D,GAGW;AAHX,GAGe;AAHf,GAGC,KAAK,CAAK,MAAI,KAAd;AAAA,IAAU;AAAV,IACC,UAAkB,AAAK,UAAU;AADlC,IAEC,WAAW,iBAAiB;AAF7B,IAGC,cAAc,aAAc,YAAW;AAHxC,IAIC,cAAc,iBAAkB;AAJjC,IAKC,eAA8B,AAAK,qBAAsB;AAL1D,IAMC,eAAuB,OAClB,WACC,eACG,mBACC,AAAC,eAAgB,gCACd,AAAE,qBAAoB,cAAgB,UAAU,kBACpD,iBACD,qBACG,mBAAa;AAdzB,IAiBC,qBAAgB;AAjBjB,IAkBC,oCAAM;AAlBP;AAHD;AAlBF,EA0CE,kBAAa;AA1Cf;kBA6C+B;AAAA,EAC7B,EAAI,OAAM,wBACT;AAAA;AAAA;AAF4B,EAI7B,cAAS,gBAAW;AAJS,EAK7B;AAL6B;eAQC;AAAA,EAA/B;AAA+B,EAC9B,cAAU,MAAM;AADc,EAE9B,kBAAa,WAAW;AAAA,GAEvB,EAAI,iBAAgB,MACnB;AAAA,2CAAuC;AAAvC;AAHsB,GAMvB,WAAW,mBAAa;AAND,GAOvB,EAAI,SAAQ,IACX;AAAA,WAAO;AAAP;AARsB,GAYvB,EAAI,aAAY;AAAA,IACf,EAAI,eACH;AAAA,0BAAa;AAAb;AAFc,IAIf,mBAAY,IAAK;AAJF,UAOf,EAAI,oBAAmB,GACtB;AAAA,IAAU;AAAV,IAAc;AAAd,SAAK,CAAK,KAAI,KAAd;AAAA,KAAU;AAAV,KACC,SAAS,UAAU;AADpB,KAEC,uBAAiB,GAAI,KAAM;AAF5B;AAAA,UAKA;AAAA,2BAAiB,OAAQ,KAAM;AAA/B;AAzBqB,GA8BvB,oBAAa;AA9BU;AAFM,EAmC9B,mBAAc,gBAEb;AAAA,yBAAe,YAAQ;AAAvB;AArC6B,EAwC9B;AAxC8B;sBA2Ce;AAAA,EAC7C,WAAW,WAAW;AADuB,EAS7C,EAAI,oBAAmB,GACtB;AAAA,GAAU;AAAV,GAAc;AAAd,QAAK,CAAK,KAAI,KAAd;AAAA,IAAU;AAAV,IAIC,UAAU,UAAU;AAJrB,IAKC,EAAQ,QACF,SAAL;AAAA,KAEC,YAAyB,AAAK,UAAU;AAFzC,KAIC,cAAsB,KAAK,mBAAoB;AAJhD,WAMA;AAAA,KAGC,SAAS,AAAK,UAAU;AAHzB,KAIC,WAAkB,gBAAiB;AAJpC,KAKC,WAAW,sBAAgB,eAAe,MAAO;AALlD,KAMC,eAAe;AANhB;AAZF;AAAA,SAsBA;AAAA,0BAAiB,OAAQ,IAAK;AAA9B;AAhC4C;eAqC7C;AAAA,mCAA2B,mBAAmB,gBAC7C;AAAA,aAAU;AAAV;AADD;;;uBCxHA;AAAA,MACC;AAAA,UAAO,EAAE,AAAK;AAAd,gBAEA;AAAA,UAAO;AAAP;AAHD;;;oBCyBmD;AAAA,EACnD,EAAG,MAAK,MACP;AAAA,GAAS;AAAT,GAAa;AAAb,QAAI,CAAK,KAAI,KAAb;AAAA,IAAS;AAAT,IACC,QAAQ,AAAuB,aAAG;AADnC,IAEC,EAAG,MAAK,KAAK,AAAC,KAAK,MAAM,KAAK,MAAY,KAAK,IAAW;AAAA,KACzD,SAAS,AAAuB,aAAG,IAAI;AADkB,KAEzD,QAAQ,SAAgB,EAAG,AAAC,MAAM,OAAY,MAAM,KAAY,KAAK;AAFZ,KAGlD,SAAW,IAAK;AAAA;AAAA,YAAO;AAAA,aAAK;AAAL;AAH2B;AAF3D;AAAA;AAFkD,EAWnD,OAAO;AAX4C;;;0BCkXnD;AAAA,SAAO,QAAQ,UAAU;AAAzB;;;oBC7YF;AAAA,EAEmB,AAAlB,eAAkB;AAFnB,EASE,aAAa;AATf;WAiBE;AAAA,SAAO,eAAU;AAAjB;QAQA;AAAA,SAAO,WAAM;AAAb;;;sBCpCoC;AAAA,EACpC,WAAkB;AADkB,EAEpC,QAAY,aAAa;AAFW,EAGpC,EAAI,MAAK,IACR;AAAA,UAAO;AAAP;AAJmC,EAMpC,IAAI,aAAa,IAAK;AANc,EAOpC,EAAI,MAAK,IACR;AAAA,UAAO;AAAP;AARmC,EASpC,QAAQ,iBAAiB;AATW,EAUpC,EAAI,MAAK,IACR;AAAA,OAAI,iBAAiB;AAArB;AAXmC,EAYpC,EAAI,MAAK,IACR;AAAA,OAAI;AAAJ;AAbmC,EAcpC,OAAO,WAAW,IAAI,EAAG;AAdW;yCAwBpC;AAAA,IAAI,UACH;AAAA,sBAAmB;AAAnB,SAEA;AAAA,sBAAmB;AAAnB;AAHD;;;6BCF0D;AAAA,EAC1D,aAAa,WAAW;AADkC,EAO1D,0BAAW,KAAa,cAAc;AAAA,GAErC,EAAI,aAAa,QAAO,IAAI;AAAA,IAE3B,YAAY,aAAa,8BAAW,KAAI,GAAY,IAAI;AAF7B,IAI3B,MAAM,UAAW,KAAI;AAJM,IAM3B,UAAU,cAAc,OAAQ;AANL,IAQ3B,SAAS,IAAI;AARc,IAU3B,EAAI,SAAQ,YACX;AAAA,YAAO;AAAP;AAX0B,UAgB3B,EAAI,EAAC,qCAAiB,OAAQ,MAAM;AAAA,IACnC,SAAS;AAD0B,IAEnC,OAAO;AAF4B,UAInC;AAAA,aAAS,cAAc,OAAQ;AAA/B;AAtBmC,GAyBrC,OAAO;AAzB8B;AAPoB,EAmC1D,OAAO;AAnCmD;;;gBChCZ;AAAA,EAC9C,WAAW;AADmC,EAE9C,iBAAkB;AAF4B,EAG9C,eAAe;AAH+B,EAI9C,OAAO;AAJuC;;;;;;"
}